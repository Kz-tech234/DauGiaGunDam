// src/pages/DonThanhToan.js
import React, { useEffect, useState } from "react";
import { Container, Card, Row, Col, Form, Button, Badge, Alert } from "react-bootstrap";
import { authApis, endpoints } from "../configs/Apis";
import cookie from "react-cookies";

const TrangDonThanhToan = () => {
  const [orders, setOrders] = useState([]);
  const [taiKhoanMap, setTaiKhoanMap] = useState({});
  const [message, setMessage] = useState(null);
  const [submittingId, setSubmittingId] = useState(null);

  const STATUS_LABELS = {
    PENDING: "Ch∆∞a tr·∫£",
    SELLER_REVIEW: "ƒêang ch·ªù ng∆∞·ªùi b√°n duy·ªát",
    PAID: "ƒê√£ tr·∫£",
    CANCELLED: "ƒê√£ h·ªßy"
  };

  const STATUS_BADGE = { 
    PENDING: "warning", //v√†ng
    SELLER_REVIEW: "primary", //xanh d∆∞∆°ng
    PAID: "success", //xanh l√°
    CANCELLED: "secondary" // m√†u x√°m
   };

  const fetchOrders = async () => {
    try {
      const res = await authApis().get(endpoints["don-cua-toi"]);
      // th√™m field t·∫°m ƒë·ªÉ bind input n·∫øu ch∆∞a c√≥
      const data = (res.data || []).map(d => ({
        ...d,
        _hoTenNhan: d.hoTenNhan || "",
        _soDienThoai: d.soDienThoai || "",
        _diaChiNhan: d.diaChiNhan || "",
        _phuongThuc: d.phuongThuc || "COD",
        _ghiChu: d.ghiChu || "",
        _minhChungFile: null
      }));
      setOrders(data);
    } catch (err) {
      console.error("L·ªói t·∫£i ƒë∆°n:", err);
      setMessage({ type: "danger", text: "Kh√¥ng t·∫£i ƒë∆∞·ª£c h√≥a ƒë∆°n c·ªßa b·∫°n." });
    }
  };

  const fetchTaiKhoanNguoiBan = async (phienId) => {
    try {
      const res = await authApis().get(endpoints["tk-nguoi-ban"](phienId));
      setTaiKhoanMap(prev => ({ ...prev, [phienId]: res.data }));
    } catch (err) {
      console.error("L·ªói l·∫•y t√†i kho·∫£n ng∆∞·ªùi b√°n:", err);
    }
  };

  useEffect(() => { fetchOrders(); }, []);

  const setField = (id, field, value, don) => {
    setOrders(prev => prev.map(d => (d.id === id ? { ...d, [field]: value } : d)));

    if (field === "_phuongThuc" && value === "BANK") {
      const phienId = don?.phienDauGia?.id;
      if (phienId && !taiKhoanMap[phienId]) {
        fetchTaiKhoanNguoiBan(phienId);
      }
    }
  };

  const onChangeMinhChung = (donId, file) => {
    const preview = file ? URL.createObjectURL(file) : null;
    setOrders(prev => prev.map(d => d.id === donId ? { ...d, _minhChungFile: file, _minhChungPreview: preview } : d));
  };

  const validate = (d) => {
    if (!d._hoTenNhan?.trim()) return "Vui l√≤ng nh·∫≠p H·ªç t√™n nh·∫≠n.";
    if (!d._soDienThoai?.trim()) return "Vui l√≤ng nh·∫≠p S·ªë ƒëi·ªán tho·∫°i.";
    if (!/^\d{8,15}$/.test(d._soDienThoai.trim())) return "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá.";
    if (!d._diaChiNhan?.trim()) return "Vui l√≤ng nh·∫≠p ƒê·ªãa ch·ªâ nh·∫≠n.";
    return "";
  };

  const handlePay = async (don) => {
    setMessage(null);

    const token = cookie.load("token");
    if (!token) {
      setMessage({ type: "danger", text: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n." });
      return;
    }

    const v = validate(don);
    if (v) {
      setMessage({ type: "danger", text: v });
      return;
    }

    setSubmittingId(don.id);

    try {
      const payload = {
        phuongThuc: don._phuongThuc, // "COD" ho·∫∑c "BANK"
        hoTenNhan: don._hoTenNhan,
        soDienThoai: don._soDienThoai,
        diaChiNhan: don._diaChiNhan,
        ghiChu: don._ghiChu || ""
      };

      await authApis().post(
        endpoints["thanh-toan-don"](don.id),
        payload,
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );

      setMessage({ type: "success", text: "Thanh to√°n th√†nh c√¥ng!" });
      await fetchOrders();
    } catch (err) {
      let msg = err?.response?.data || "Thanh to√°n th·∫•t b·∫°i!";
      if (typeof msg === "string" && msg.startsWith("<!doctype")) {
        msg = "Kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c (401). Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
      }
      setMessage({ type: "danger", text: msg });
    } finally {
      setSubmittingId(null);
    }
  };


  const pending = orders.filter(o => o.trangThai === "PENDING");

  return (
    <Container className="mt-4">
      <div className="d-flex align-items-center mb-3">
        <h3 className="mb-0">H√≥a ƒë∆°n ƒë√£ th·∫Øng</h3>
        <Badge bg="warning" text="dark" className="ms-2">{pending.length} ch·ªù thanh to√°n</Badge>
      </div>

      {message && <Alert variant={message.type}>{message.text}</Alert>}

      {orders.length === 0 ? (
        <div className="text-muted">B·∫°n ch∆∞a c√≥ h√≥a ƒë∆°n n√†o.</div>
      ) : (
        <Row xs={1} md={2} className="g-3">
          {orders.map((d) => {
            const sp = d?.phienDauGia?.sanPham;
            const status = d.trangThai;
            const statusLabel = STATUS_LABELS[status] ?? status;
            const badgeVariant = STATUS_BADGE[status] ?? "secondary";

            return (
              <Col key={d.id}>
                <Card className="h-100 shadow-sm">
                  <Card.Body>
                    <div className="d-flex justify-content-between align-items-start">
                      <Card.Title className="mb-2" style={{ maxWidth: "70%" }}>
                        {sp?.tenSanPham || `Phi√™n #${d?.phienDauGia?.id}`}
                      </Card.Title>
                      <Badge bg={badgeVariant}>{statusLabel}</Badge>
                    </div>

                    <div className="mb-2">
                      <strong>Gi√° ph·∫£i tr·∫£:</strong> {Number(d.soTien || 0).toLocaleString("vi-VN")} ƒë
                    </div>
                    <div className="text-muted mb-3" style={{ fontSize: 13 }}>
                      T·∫°o l√∫c {new Date(d.ngayTao).toLocaleString("vi-VN")}
                    </div>

                    {status === "PENDING" ? (
                      <>
                        <Form>
                          <Row className="g-2">
                            <Col md={6}>
                              <Form.Group>
                                <Form.Label>H·ªç t√™n nh·∫≠n</Form.Label>
                                <Form.Control
                                  value={d._hoTenNhan}
                                  onChange={(e) => setField(d.id, "_hoTenNhan", e.target.value)}
                                />
                              </Form.Group>
                            </Col>
                            <Col md={6}>
                              <Form.Group>
                                <Form.Label>S·ªë ƒëi·ªán tho·∫°i</Form.Label>
                                <Form.Control
                                  value={d._soDienThoai}
                                  onChange={(e) => setField(d.id, "_soDienThoai", e.target.value)}
                                />
                              </Form.Group>
                            </Col>
                          </Row>

                          <Form.Group className="mt-2">
                            <Form.Label>ƒê·ªãa ch·ªâ nh·∫≠n</Form.Label>
                            <Form.Control
                              value={d._diaChiNhan}
                              onChange={(e) => setField(d.id, "_diaChiNhan", e.target.value)}
                            />
                          </Form.Group>

                          <Row className="g-2 mt-2">
                            <Col md={6}>
                              <Form.Group>
                                <Form.Label>Ph∆∞∆°ng th·ª©c</Form.Label>
                                <Form.Select
                                  value={d._phuongThuc}
                                  onChange={(e) => setField(d.id, "_phuongThuc", e.target.value, d)}
                                >
                                  <option value="COD">COD (Thanh to√°n khi nh·∫≠n)</option>
                                  <option value="BANK">Chuy·ªÉn kho·∫£n</option>
                                </Form.Select>
                              </Form.Group>
                            </Col>
                            <Col md={6}>
                              <Form.Group>
                                <Form.Label>Ghi ch√∫</Form.Label>
                                <Form.Control
                                  value={d._ghiChu}
                                  onChange={(e) => setField(d.id, "_ghiChu", e.target.value)}
                                />
                              </Form.Group>
                            </Col>
                          </Row>
                          {d._phuongThuc === "BANK" && (
                            <div className="mt-3">
                              {taiKhoanMap[d?.phienDauGia?.id] && (
                                <div className="border rounded p-3 bg-light mb-3">
                                  <h6 className="mb-2">üí≥ Th√¥ng tin chuy·ªÉn kho·∫£n</h6>
                                  <div><strong>Ng√¢n h√†ng:</strong> {taiKhoanMap[d.phienDauGia.id].nganHang}</div>
                                  <div><strong>S·ªë t√†i kho·∫£n:</strong> {taiKhoanMap[d.phienDauGia.id].soTaiKhoan}</div>
                                  <div><strong>Ch·ªß t√†i kho·∫£n:</strong> {taiKhoanMap[d.phienDauGia.id].tenNguoiNhan}</div>
                                  {taiKhoanMap[d.phienDauGia.id].qrUrl && (
                                    <div className="mt-2">
                                      <img src={taiKhoanMap[d.phienDauGia.id].qrUrl} alt="QR chuy·ªÉn kho·∫£n" style={{ maxWidth: 200 }} />
                                    </div>
                                  )}
                                </div>
                              )}
                            </div>
                          )}
                        </Form>


                        <div className="d-flex justify-content-end mt-3">
                          <Button
                            variant="success"
                            disabled={submittingId === d.id}
                            onClick={() => handlePay(d)}
                          >
                            {submittingId === d.id ? "ƒêang x·ª≠ l√Ω..." : "Thanh to√°n"}
                          </Button>
                        </div>
                      </>
                    ) : (
                      <>
                        <div><strong>Tr·∫°ng th√°i:</strong> {statusLabel}</div>
                        <div><strong>Ph∆∞∆°ng th·ª©c:</strong> {d.phuongThuc}</div>
                        {d.ngayThanhToan && (
                          <div><strong>Ng√†y thanh to√°n:</strong> {new Date(d.ngayThanhToan).toLocaleString("vi-VN")}</div>
                        )}
                      </>
                    )}
                  </Card.Body>
                </Card>
              </Col>
            );
          })}
        </Row>
      )}
    </Container>
  );
};

export default TrangDonThanhToan;
